spring:
  main:
    web-application-type: reactive
  kafka:
    consumer:
      group-id: user-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      auto-offset-reset: latest
      bootstrap-servers: ${KAFKA_URLS}
      properties:
        spring.json.add.type.header: false
        spring.deserializer.value.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      retries: 2
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      bootstrap-servers: ${KAFKA_URLS}
    bootstrap-servers: ${KAFKA_URLS}
  datasource:
    dbms: ${DBMS}
    host: ${DB_HOST}
    port: ${DB_PORT}
    database: ${DB_NAME}
    password: ${DB_PASSWORD}
    username: ${DB_USERNAME}
    show-sql: ${SHOW_SQL}
    format-sql: false
    highlight-sql: false
    ddl-auto: ${DDL_AUTO_MODE}
    pool-size: ${DB_POOL}
  jackson:
    property-naming-strategy: SNAKE_CASE
    date-format: yyyy-MM-dd'T'HH:mm:ss
    time-zone: Asia/Seoul

server:
  port: ${SERVER_PORT}
  shutdown: graceful

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  endpoint:
    health:
      show-details: when_authorized

service:
  authority:
    host: ${AUTHORITY_SERVICE_HOST}

---

spring:
  config:
    activate:
      on-profile: local
  datasource:
    show-sql: true
    format-sql: true
    highlight-sql: true